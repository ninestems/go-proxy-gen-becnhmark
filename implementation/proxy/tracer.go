// Code generated by generator DO NOT EDIT.

package proxy

import (
	source "github.com/ninestems/go-proxy-gen-benchmark/implementation"
	trace "go.opentelemetry.io/otel/trace"
	traceprovider "go.opentelemetry.io/otel/sdk/trace"
    "fmt"
    "reflect"
    "go.opentelemetry.io/otel/attribute"
    "go.opentelemetry.io/otel/codes"
	"context"
)

// attr helps define correct type for trace proxy layer.
func attr(key string, value any) attribute.KeyValue {
    switch v := value.(type) {
    case string:
        return attribute.String(key, v)
    case bool:
        return attribute.Bool(key, v)
    case int:
        return attribute.Int(key, v)
    case int64:
        return attribute.Int64(key, v)
    case float64:
        return attribute.Float64(key, v)
    case []string:
        return attribute.StringSlice(key, v)
    case fmt.Stringer:
        return attribute.String(key, v.String())
    default:
        return attribute.String(key, fmt.Sprintf("%v (%s)", value, reflect.TypeOf(value)))
    }
}

// ConverterProxyTracer proxy wrapper for source.Converter.
type ConverterProxyTracer struct {
	src source.Converter
	trace trace.Tracer
}

// NewConverterProxyTracer creates a new proxy trace for source.Converter.
func NewConverterProxyTracer(
	src source.Converter,
	tp *traceprovider.TracerProvider,
) *ConverterProxyTracer {
	return &ConverterProxyTracer{
		src: src,
		trace: tp.Tracer("ConverterProxyTracer"),
	}
}

// Convert is proxy method for source.Converter.Convert.
func (p *ConverterProxyTracer) Convert(ctx context.Context, id string) (out0 int64, out1 error) {
	ctx, span := p.trace.Start(ctx, "ConverterProxyTracer.Convert() started")
	defer span.End()
    span.SetAttributes(
        attr("trace_id", ctx.Value("traceID")),
        attr("id", id),
    )
	out0, out1 = p.src.Convert(ctx, id)
	if out1 != nil {
        span.RecordError(out1)
        span.SetStatus(codes.Error, out1.Error())
	} else {
        span.SetAttributes(
            attr("out_alias", out0),
        )
        span.SetStatus(codes.Ok, "ConverterProxyTracer.Convert() success")
	}

	return
}