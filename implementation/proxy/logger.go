// Code generated by generator DO NOT EDIT.

package proxy

import (
	source "github.com/ninestems/go-proxy-gen-becnhmark/implementation"
	zap "go.uber.org/zap"
    "encoding/json"
    "fmt"
    "reflect"
	"context"
)

func zfield(key string, value any) zap.Field {
    switch v := value.(type) {
    case string:
        return zap.String(key, v)
    case bool:
        return zap.Bool(key, v)
    case int:
        return zap.Int(key, v)
    case int64:
        return zap.Int64(key, v)
    case int32:
        return zap.Int32(key, v)
    case uint:
        return zap.Uint(key, v)
    case uint64:
        return zap.Uint64(key, v)
    case float64:
        return zap.Float64(key, v)
    case float32:
        return zap.Float32(key, v)
    case []string:
        return zap.Strings(key, v)
    case fmt.Stringer:
        return zap.String(key, v.String())
    case error:
        return zap.Error(v)
    case json.RawMessage:
        return zap.ByteString(key, v)
    default:
        if b, err := json.Marshal(value); err == nil {
            return zap.ByteString(key, b)
        }
        return zap.String(key, fmt.Sprintf("%v (%s)", value, reflect.TypeOf(value)))
    }
}

// ConverterProxyLogger proxy wrapper for source.Converter.
type ConverterProxyLogger struct {
	src source.Converter
	log *zap.Logger
}

// NewConverterProxyLogger creates a new proxy logger for source.Converter.
func NewConverterProxyLogger(
	src source.Converter,
	log *zap.Logger,
) *ConverterProxyLogger {
	return &ConverterProxyLogger{
		src: src,
		log: log.Named("ConverterProxyLogger"),
	}
}

// Convert is proxy method for source.Converter.Convert.
func (p *ConverterProxyLogger) Convert(ctx context.Context, id string) (out0 int64, out1 error) {
	p.log.Info(
		"Convert() started",
		zap.Any("trace_id", ctx.Value("traceID")),
		zfield("id", id),
	)
	out0, out1 = p.src.Convert(ctx, id)
	if out1 != nil {
		p.log.Info(
			"Convert() ends with error",
			zap.Error(out1),
		)
	} else {
		p.log.Info(
			"Convert() ends with success",
			zfield("out_alias", out0),
		)
	}

	return
}